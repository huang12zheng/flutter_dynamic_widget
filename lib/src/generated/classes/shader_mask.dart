import '../base.dart';

class ShaderMaskBase extends BaseWidget {
    ShaderMaskBase();

    factory ShaderMaskBase.fromJson(Map<String, dynamic> data) {
        return ShaderMaskBase();
    }

    @override
    String get description => r"""
A widget that applies a mask generated by a [Shader] to its child.

For example, [ShaderMask] can be used to gradually fade out the edge
of a child by using a [new ui.Gradient.linear] mask.

{@youtube 560 315 https://www.youtube.com/watch?v=7sUL66pTQ7Q}

{@tool snippet}

This example makes the text look like it is on fire:

```dart
ShaderMask(
  shaderCallback: (Rect bounds) {
    return RadialGradient(
      center: Alignment.topLeft,
      radius: 1.0,
      colors: <Color>[Colors.yellow, Colors.deepOrange.shade900],
      tileMode: TileMode.mirror,
    ).createShader(bounds);
  },
  child: const Text('Iâ€™m burning the memories'),
)
```
{@end-tool}

See also:

 * [Opacity], which can apply a uniform alpha effect to its child.
 * [CustomPaint], which lets you draw directly on the canvas.
 * [DecoratedBox], for another approach at decorating child widgets.
 * [BackdropFilter], which applies an image filter to the background.
""";

    @override
    Map<String, dynamic> toJson() {
        return {};
    }

    @override
    Widget render(BuildContext context) {
        return Container();
    }
}